// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Model_driven_BODY

/************************************************************
 driven class body
 ************************************************************/

// include associated header file
#include "Model/driven.h"

// Derived includes directives

namespace Model {

// static attributes (if any)

/**
 *
 * @return
 */
std::string driven::getCategory() {
return Category;
}

/**
 *
 * @param name
 */
void driven::setCategory(std::string /*in*/name) {
Category = name;
}

/**
 *
 */
void driven::rmAllEquipment() {
}

/**
 *
 * @param velocity
 */
void driven::setVelo(Vector3D /*in*/v) {
Velocity.x = v.x;
Velocity.y = v.y;
Velocity.z = v.z;
}

/**
 *
 * @return velocity
 */
Vector3D driven::getVelo() {
return Velocity;
}

/**
 *
 * @param orientation
 */
void driven::setOrientation(Vector3D /*in*/o) {
Orientation.x = o.x;
Orientation.y = o.y;
Orientation.z = o.z;
}

/**
 *
 * @return orientation
 */
Vector3D driven::getOrientation() {
  return Orientation;
}

/**
 *
 * @return
 */
std::string driven::getSubCategory() {
  return SubCategory;
}

/**
 *
 * @param name
 */
void driven::setSubCategory(std::string /*in*/sub) {
  SubCategory = sub;

}

/**
 *
 * @param type
 */
void driven::setType(std::string /*in*/type) {
  Type = type;
}

/**
 *
 * @return type
 */
std::string driven::getType() {
  return Type;
}

void driven::printInfo(){

}

 void driven::getDIS_PDUType(std::string kind, std::string domain , std::string country , std::string category,  std::string subcategory) {

DIS_EntityType_Variables EntityType;
Model::DIS_enum convert;

std::cout << kind<<domain<<country<<category<<subcategory << '\n';

 EntityType =  convert.getDISEntityType(kind, domain ,country , category,  subcategory,  "todo",  "todo");

 std::cout << EntityType.Kind<<" " << EntityType.Domain<<" " << EntityType.Country<<" " <<EntityType.Category<<" " <<EntityType.SubCategory <<'\n';

object::setDIS_EntityType_Variables(EntityType);



 }

 void driven::createDISPDU(){
   driven::getDIS_PDUType(object::getKind(), object::getDomain() , object::getCountry() , Category,  SubCategory);
   DIS::Vector3Float velo;
   velo.setX(Velocity.x);
   velo.setY(Velocity.y);
   velo.setZ(Velocity.z);
   DIS::Orientation orie;
   orie.setTheta(Orientation.x);
   orie.setPsi(Orientation.y);
   orie.setPhi(Orientation.z);
   object::makeStdDISPDU(velo, orie);

 }


} // of namespace Model

/************************************************************
 End of driven class body
 ************************************************************/
