// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Model_vls_BODY

/************************************************************
 vls class body
 ************************************************************/

// include associated header file
#include "Model/vls.h"

// Derived includes directives

namespace Model {

// static attributes (if any)

/**
 *
 * @param name
 * @param cells
 * @param type
 */
vls::vls(std::string /*in*/n, std::string /*in*/t, int /*in*/number) : numberOfCells(number) {
weapon::setName(n);
weapon::setType(t);
}

/**
 *
 */
void vls::printInfo() {
	std::cout<< "Name:" << weapon::getName()<< " Type:"<<weapon::getType()
	<< " Number of cells:" << numberOfCells<<std::endl;
	std::cout<<"Rockets:" <<std::endl;

	for(std::list<rocket*>::iterator it=rocketList.begin(); it != rocketList.end(); ++it)
			{
				(*it)->printInfo();
				//std::cout<<" "<<std::endl;
			}
}


/**
 *
 * @param rocket
 */
void vls::addRocket(rocket /*in*/*r) {
	rocketList.push_back(r);

}

/**
 *
 * @param
 */
void vls::rmRocket(rocket /*in*/*r) {
	rocketList.remove(r);

}

/**
 *
 * @param n
 */
void vls::setNumberOfCells(int /*in*/n) {
	numberOfCells = n;

}

/**
 *
 */
void vls::getNumberOfCells() {
	return numberOfCells;

}

} // of namespace Model

/************************************************************
 End of vls class body
 ************************************************************/
