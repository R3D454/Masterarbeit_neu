// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Model_military_BODY

/************************************************************
 military class body
 ************************************************************/

// include associated header file
#include "Model/military.h"

// Derived includes directives
#include "Model/Equipment.h"

namespace Model {

// static attributes (if any)
military::military(std::string /*in*/Name, std::string /*in*/Type,std::string /*in*/country) {
  object::setName(Name);
  driven::setType(Type);
  object::setCountry(country);
  object::setKind("Platform");
  object::SetDomain("Land");
  object::setPosition(0,0,0);

  if (Type == "Leopard 1") {
    driven::setCategory("Tank");
    driven::setSubCategory("Leopard 1");
  } else if (Type == "Leopard 2 A1" ||Type == "Leopard 2 A2" ||Type =="Leopard 2 A3" ||Type =="Leopard 2 A4" ||Type =="Leopard 2 A5" ) {
    driven::setCategory("Tank");
    driven::setSubCategory("Leopard 2");
  } else if( Type == "Leopard 2 A6" ||Type =="Leopard 2 A6M") {
    driven::setCategory("Tank");
    driven::setSubCategory("Leopard 2 (improved)");
  }
  else{
    std::string SubCategory;
    std::string Category;
    std::cout <<"Category as written in DIS Enum:";
    getline(std::cin, Category);
    std::cout << std::endl <<"SubCategory as written in DIS Enum:";
    getline(std::cin, SubCategory);
    driven::setSubCategory(SubCategory);
    driven::setCategory(Category);
  }

  equipment = NULL;
  driven::setEquipment(NULL);
  object::incrementCounter();
}

military::~military(){
  object::decrementCounter();
}
/**
 *
 */
void military::calcShoot() {
}

/**
 *
 * @param Name
 */
void military::addEquipment(Equipment /*in*/*eq) {
  equipment = eq;
  driven::setEquipment(eq);
}

/**
 *
 */
void military::rmEquipment() {
  equipment = NULL;

}

/**
 *
 * @param Name
 * @param Type
 */

/**
 *
 * @return equipment
 */
Equipment* military::getEquipment() {
  return equipment;
}
void military::printInfo(){
  std::cout << "Name:" << object::getName() <<" "<< "Typ:" << driven::getType() <<'\n';

  equipment->printInfo();

}
} // of namespace Model

/************************************************************
 End of military class body
 ************************************************************/
