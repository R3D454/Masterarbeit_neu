// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Model_civilPlane_BODY

/************************************************************
 civilPlane class body
 ************************************************************/

// include associated header file
#include "Model/civilPlane.h"

// Derived includes directives
#include "Model/sensor.h"

namespace Model {
  // static attributes (if any)

  /**
  *
  * @param Name
  * @param Typ
  * @param Country
  */
  civilPlane::civilPlane(std::string /*in*/n, std::string /*in*/t,std::string/*in*/ country) {
    object::setName(n);
    driven::setType(t);
    object::setKind("Platform");
    object::setCountry(country);
    object::SetDomain("Air");
    object::setPosition(0,0,0);
    object::incrementCounter();
  }


civilPlane::~civilPlane(){
  object::decrementCounter();
}
/**
 *
 */
void civilPlane::rmSensor() {
  sensorList.clear();
  equipment = NULL;
  driven::setEquipment(NULL);
}

/**
 *
 * @param sensor
 */
void civilPlane::addSensor(sensor /*in*/*s) {
  sensorList.push_back(s);
  if (equipment == NULL) {
    equipment = new Model::Equipment("Alpha");
    equipment->addSensor(s);

  } else {
    equipment->addSensor(s);
  }
  driven::setEquipment(equipment);

}


/**
 *
 * @return sensors
 */
std::list<sensor*> civilPlane::getSensors() {
  if (equipment == NULL) {
    return sensorList;

  } else {
  return  equipment->getSensor();
  }
}
void civilPlane::printInfo(){
	  std::cout << "Name:" << object::getName() <<" "<< "Typ:" << driven::getType() <<'\n';
    equipment->printInfo();

}
} // of namespace Model

/************************************************************
 End of civilPlane class body
 ************************************************************/
