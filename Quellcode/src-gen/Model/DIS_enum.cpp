// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define DIS_ENUM_BODY

/************************************************************
 object class body
 ************************************************************/

// include associated header file
#include "Model/DIS_enum.h"


namespace Model {

  DIS_enum::DIS_enum(){
    Kind[0]="Other";
    Kind[1]="Platform";
    Kind[2]="Munition";
    Kind[3]="Life form";
    Kind[4]="Environmental";
    Kind[5]="Cultural Feature";
    Kind[6]="Supply";
    Kind[7]="Radio";
    Kind[8]="Expendable";
    Kind[9]="Sensor/Emitter";

    DomainPlatform[0]="Other";
    DomainPlatform[1]="Land";
    DomainPlatform[2]="Air";
    DomainPlatform[3]="Surface";
    DomainPlatform[4]="Subsurface";
    DomainPlatform[5]="Space";

    CategoryLand[0]="Other";
    CategoryLand[1]="Tank";
    CategoryLand[2]="Armored Fighting Vehicle";
    CategoryLand[3]="Armored Utility Vehicle";
    CategoryLand[4]="Self-propelled Artillery";
    CategoryLand[5]="Towed Artillery";
    CategoryLand[6]="Small Wheeled Utility Vehicle";
    CategoryLand[7]="Large Wheeled Utility Vehicle";
    CategoryLand[8]="Small Tracked Utility Vehicle";
    CategoryLand[9]="Large Tracked Utility Vehicle";
    CategoryLand[10]="Mortar";
    CategoryLand[11]="Mine plow";
    CategoryLand[12]="Mine rake";
    /* to be finished
    CategoryLand[13]="Other";
  */

    CategoryAir[0]="Other";
    CategoryAir[1]="Fighter/Air Defense";
    CategoryAir[2]="Attack/Strike";
    CategoryAir[3]="Bomber";
    CategoryAir[4]="Cargo/Tanker";
    CategoryAir[5]="ASW/Patrol/Observation";
    CategoryAir[6]="Electronic Warfare (EW)";
    /*to be finished
    CategoryAir[0]="Other";
    */

    CategorySurface[0]="Other";
    CategorySurface[1]="Carrier";
    CategorySurface[2]="Command Ship/Cruiser";
    CategorySurface[3]="Guided Missile Cruiser";
    CategorySurface[4]="Guided Missile Destroyer (DDG)";
    CategorySurface[5]="Destroyer (DD)";
    CategorySurface[6]="Guided Missile Frigate (FFG)";
    CategorySurface[6]="Guided Missile Frigate (FFG)";
    CategorySurface[7]="Light/Patrol Craft";
    CategorySurface[8]="Mine Countermeasure Ship/Craft";
    /*
    to be finished
    */

    CategorySubSurface[0]="Other";
    CategorySubSurface[1]="SSBN (Nuclear Ballistic Missile)";
    CategorySubSurface[2]="SSGN (Nuclear Guided Missile)";
    CategorySubSurface[3]="SSN (Nuclear Attack - Torpedo)";
    CategorySubSurface[4]="SSG (Conventional Guided Missile)";
    CategorySubSurface[5]="SS (Conventional Attack - Torpedo, Patrol)";
    CategorySubSurface[6]="SSAN (Nuclear Auxiliary)";
    CategorySubSurface[7]="SSA (Conventional Auxiliary)";

    CategorySpace[0]="Other";
    CategorySpace[1]="Manned";
    CategorySpace[2]="Unmanned";
    CategorySpace[3]="Booster";

    DomainMunition[0]="Other";
    DomainMunition[1]="Anti-Air";
    DomainMunition[2]="Anti-Armor";
    DomainMunition[3]="Anti-Guided Weapon";
    DomainMunition[4]="Antiradar";
    DomainMunition[5]="Antisatellite";
    DomainMunition[6]="Antiship";
    DomainMunition[7]="Antisubmarine";
    DomainMunition[8]="Antipersonnel";
    DomainMunition[9]="Battlefield Support";
    DomainMunition[10]="Strategic";
    DomainMunition[11]="Tactical";
    DomainMunition[12]="Directed Energy (DE) Weapon";

    CategoryMunition[0]="Other";
    CategoryMunition[1]="Guided";
    CategoryMunition[2]="Ballistic";
    CategoryMunition[3]="Fixed";

    Country[78] = "Germany";
    Country[225] = "USA";
    Country[222] = "Russia(RUS)";



    GermanLandTankSubcategory[1] = "Leopard 1";
    GermanLandTankSubcategory[2] = "Leopard 2";
    GermanLandTankSubcategory[3] = "Leopard 2 (improved)";

    GermanGuidedMissileFrigate[1] = "Brandenburg class (Type 123)";
    GermanGuidedMissileFrigate[2] = "Bremen class (Type 122)";
    GermanGuidedMissileFrigate[3] = "Sachsen Class (Type 124)";


    USLandTankSubcategory[1] = "M1 Abrams";
    USLandTankSubcategory[2] = "M60 Main Battle Tank (MBT)";
    USLandTankSubcategory[3] = "M551 Sheridan";

    USCarrier[1] = "Nimitz Class";
    USCarrier[2] = "Enterprise Class";
    USCarrier[3] = "Kitty Hawk/John F. Kennedy Class";
    USCarrier[4] = "Forrestal Class";

    USGuidedMissileCrusier[1] = "Ticonderoga Class";
    USGuidedMissileCrusier[3] = "California Class";
    USGuidedMissileCrusier[4] = "Truxtun Class";
    USGuidedMissileCrusier[6] = "Bainbridge Class";

    USGuidedMissileDestroyer[1] = "Arleigh Burke Class";
    USGuidedMissileDestroyer[3] = "Coontz Class";
    USGuidedMissileDestroyer[4] = "Charles F. Adams Class";

    USDestroyer[1] = "Spruance Class";

    USGuidedMissileFrigate[1] = "Oliver Perry Class";
    USGuidedMissileFrigate[2] = "Knox Class";



    RussiaLandTankSubcategory[1] = "T-80";
    RussiaLandTankSubcategory[2] = "T-72";
    RussiaLandTankSubcategory[3] = "T-64";

    RussiaCarrier[3] = "Kuznetsov class";
    RussiaCarrier[4] = "Modified Kiev clas";

    RussiaGuidedMissileCrusier[1] = "Slava class";
    RussiaGuidedMissileCrusier[2] = "Kirov class";
    RussiaGuidedMissileCrusier[3] = "Kara class";


    RussiaGuidedMissileDestroyer[1] = "Udaloy class",
    RussiaGuidedMissileDestroyer[2] = "Sovremennyy class",
    RussiaGuidedMissileDestroyer[4] = "Kashin class",


    // RussiaDestroyer[] = "";
    // RussiaDestroyer[] = "";
    // RussiaDestroyer[] = "";

    RussiaGuidedMissileFrigate[1] = "Krivak I class";
    RussiaGuidedMissileFrigate[2] = "Krivak II class";
    RussiaGuidedMissileFrigate[4] = "Neustrashimy class";

  }

  DIS_EntityType_Variables DIS_enum::getDISEntityType(std::string kind, std::string domain,
                                                              std::string country, std::string category,
                                                              std::string subcategory,  std::string specific,
                                                              std::string extra){
    DIS_EntityType_Variables help;


    for (std::map<int,std::string>::iterator it=Kind.begin(); it!=Kind.end(); ++it)
    if (it->second == kind) {
      help.Kind =  it->first;
    }

    switch (help.Kind) {
      case 1:
        for (std::map<int,std::string>::iterator it=DomainPlatform.begin(); it!=DomainPlatform.end(); ++it)
        if (it->second == domain) {
          help.Domain =  it->first;
        }
        switch (help.Domain) {
            case 0: // domain other
            break;
            case 1: // domain land
              for (std::map<int,std::string>::iterator it=Country.begin(); it!=Country.end(); ++it){
                  if (it->second == country) {
                    help.Country =  it->first;
                  }
                }
                switch (help.Country) {
                  case 78: // germany
                    for (std::map<int,std::string>::iterator it=CategoryLand.begin(); it!=CategoryLand.end(); ++it){
                        if (it->second == category) {
                          help.Category =  it->first;
                        }
                      }
                      switch (help.Category) {
                        case 1 : //tank
                          for (std::map<int,std::string>::iterator it=GermanLandTankSubcategory.begin(); it!=GermanLandTankSubcategory.end(); ++it){
                              if (it->second == subcategory) {
                                help.SubCategory =  it->first;
                                // std::cout << help.SubCategory << '\n';
                              }
                            }
                        break;
                        //amored fighting vehicle
                        case 2 :
                        break;
                        //Armored Utility Vehicle
                        case 3 :
                        break;
                        default:
                          std::cout << "invalid Category" << '\n';
                        break;
                      }
                  break;

                  case 225: //usa

                    for (std::map<int,std::string>::iterator it=CategoryLand.begin(); it!=CategoryLand.end(); ++it){
                        if (it->second == category) {
                          help.Category =  it->first;
                        }
                      }
                      switch (help.Category) {
                        case 1 : //tank
                          for (std::map<int,std::string>::iterator it=USLandTankSubcategory.begin(); it!=USLandTankSubcategory.end(); ++it){
                              if (it->second == subcategory) {
                                help.SubCategory =  it->first;
                              }
                            }
                        break;
                        //amored fighting vehicle
                        case 2 :
                        break;
                        //Armored Utility Vehicle
                        case 3 :
                        break;
                        default:
                          std::cout << "invalid Category" << '\n';
                        break;
                      }
                    break;
                  case 222 : //russia

                    for (std::map<int,std::string>::iterator it=CategoryLand.begin(); it!=CategoryLand.end(); ++it){
                        if (it->second == category) {
                          help.Category =  it->first;
                        }
                      }
                      switch (help.Category) {
                        case 1 : //tank
                          for (std::map<int,std::string>::iterator it=USLandTankSubcategory.begin(); it!=USLandTankSubcategory.end(); ++it){
                              if (it->second == subcategory) {
                                help.SubCategory =  it->first;
                              }
                            }
                        break;
                        //amored fighting vehicle
                        case 2 :
                        break;
                        //Armored Utility Vehicle
                        case 3 :
                        break;
                        default:
                          std::cout << "invalid Category" << '\n';
                        break;
                      }
                    break;

                    // more countries
                  break;
                  default:
                  std::cout << "invalid Country" << '\n';
                  std::cout << "Possible is: 'Germany' 'USA' or 'Russia'" << '\n';
                }
            break;

            case 2: // domain air

            break;

            case 3: // domain surface
              for (std::map<int,std::string>::iterator it=Country.begin(); it!=Country.end(); ++it){
                  if (it->second == country) {
                    help.Country =  it->first;
                  }
                }
                switch (help.Country) {
                  case 78: // germany
                    for (std::map<int,std::string>::iterator it=CategorySurface.begin(); it!=CategorySurface.end(); ++it){
                        if (it->second == category) {
                          help.Category =  it->first;

                          switch (help.Category) {
                            case 1 : //Carrier

                            break;

                            case 2 : //Command Ship/Cruiser

                            break;

                            case 3 ://Guided Missile Cruiser GermanGuidedMissileFrigate
                            for (std::map<int,std::string>::iterator it=GermanGuidedMissileFrigate.begin(); it!=GermanGuidedMissileFrigate.end(); ++it){
                              if (it->second == subcategory) {
                                help.SubCategory =  it->first;
                              }

                            }
                            break;

                            case 4: //Guided Missile Destroyer (DDG)
                            break;

                            case 5://Destroyer
                            break;

                            case 6://Guided Missile Frigate (FFG)
                            for (std::map<int,std::string>::iterator it=GermanGuidedMissileFrigate.begin(); it!=GermanGuidedMissileFrigate.end(); ++it){
                              if (it->second == subcategory) {
                                help.SubCategory =  it->first;
                                // std::cout << help.SubCategory << '\n';
                              }

                            }
                            break;
                            default:
                              std::cout << "invalid Category" << '\n';
                            break;
                          }
                        }
                      }
                  break;

                  case 225: //usa
                    for (std::map<int,std::string>::iterator it=CategorySurface.begin(); it!=CategorySurface.end(); ++it){
                        if (it->second == category) {
                          help.Category =  it->first;
                        }
                      }
                    switch (help.Category) {

                      case 1 : //Carrier
                        for (std::map<int,std::string>::iterator it=USCarrier.begin(); it!=USCarrier.end(); ++it){
                            if (it->second == subcategory) {
                              help.SubCategory =  it->first;
                            }
                        }
                      break;

                      case 2 : //Command Ship/Cruiser

                      break;

                      case 3 ://Guided Missile Cruiser
                        for (std::map<int,std::string>::iterator it=USGuidedMissileCrusier.begin(); it!=USGuidedMissileCrusier.end(); ++it){
                            if (it->second == subcategory) {
                              help.SubCategory =  it->first;
                            }
                          }
                      break;

                      case 4: //Guided Missile Destroyer (DDG)
                        for (std::map<int,std::string>::iterator it=USDestroyer.begin(); it!=USDestroyer.end(); ++it){
                            if (it->second == subcategory) {
                              help.SubCategory =  it->first;
                            }
                          }
                      break;

                      case 5://Destroyer
                        for (std::map<int,std::string>::iterator it=USDestroyer.begin(); it!=USDestroyer.end(); ++it){
                            if (it->second == subcategory) {
                              help.SubCategory =  it->first;
                            }
                          }
                      break;

                      case 6://Guided Missile Frigate (FFG)
                        for (std::map<int,std::string>::iterator it=USGuidedMissileFrigate.begin(); it!=USGuidedMissileFrigate.end(); ++it){
                            if (it->second == subcategory) {
                              help.SubCategory =  it->first;
                            }
                          }
                      break;
                      default:
                        std::cout << "invalid Category" << '\n';
                      break;
                    }
                  break;
                  case 222 : //russia
                    for (std::map<int,std::string>::iterator it=CategorySurface.begin(); it!=CategorySurface.end(); ++it){
                        if (it->second == category) {
                          help.Category =  it->first;
                        }
                      }
                  switch (help.Category) {

                    case 1 : //Carrier
                      for (std::map<int,std::string>::iterator it=RussiaCarrier.begin(); it!=RussiaCarrier.end(); ++it){
                          if (it->second == subcategory) {
                            help.SubCategory =  it->first;
                          }
                      }
                    break;

                    case 2 : //Command Ship/Cruiser

                    break;

                    case 3 ://Guided Missile Cruiser
                      for (std::map<int,std::string>::iterator it=RussiaGuidedMissileCrusier.begin(); it!=RussiaGuidedMissileCrusier.end(); ++it){
                          if (it->second == subcategory) {
                            help.SubCategory =  it->first;
                          }
                        }
                    break;

                    case 4: //Guided Missile Destroyer (DDG)
                      for (std::map<int,std::string>::iterator it=USDestroyer.begin(); it!=USDestroyer.end(); ++it){
                          if (it->second == subcategory) {
                            help.SubCategory =  it->first;
                          }
                        }
                    break;

                    case 5://Destroyer

                    break;

                    case 6://Guided Missile Frigate (FFG)
                      for (std::map<int,std::string>::iterator it=RussiaGuidedMissileFrigate.begin(); it!=RussiaGuidedMissileFrigate.end(); ++it){
                          if (it->second == subcategory) {
                            help.SubCategory =  it->first;
                          }
                        }
                    break;
                    default:
                      std::cout << "invalid Category" << '\n';
                    break;
                  }
                  break;

                  // more countries


                  default:
                  std::cout << "invalid Country" << '\n';
                  std::cout << "Possible is: 'Germany' 'USA' or 'Russia'" << '\n';



                }
            break;
            default:
            std::cout << "invalid Domain" << '\n';
            std::cout << "Possible is: 'Land' or 'Surface' or 'Subsurface' or 'Air' or 'Space'  " << '\n';












            //more domains



        }


      break;
      default : std::cout << "invalid Kind" << '\n';
      std::cout << "Possible is: 'Other'  'Platform'  'Munition'  'Life form'  'Environmental'  'Cultural Feature'  'Supply'  'Radio'  'Expendable' or 'Sensor/Emitter' " << '\n';
    }

    // for (std::map<int,std::string>::iterator it=CategoryLand.begin(); it!=CategoryLand.end(); ++it){
    //     if (it->second == category) {
    //       help.Category =  it->first;
    //     }
    //   }
    // for (std::map<int,std::string>::iterator it=DomainPlatform.begin(); it!=DomainPlatform.end(); ++it)
    //     if (it->second == category) {
    //       help.Domain =  it->first;
    //
    //     }
    return help;
  }

  int DIS_enum::getDISDomain(std::string domain){
    for (std::map<int,std::string>::iterator it=DomainPlatform.begin(); it!=DomainPlatform.end(); ++it)
        if (it->second == domain) {
          return it->first;
        }
  return 99;
  }

 // to do
  // std::string DIS_enum::checkContentType(std::string /*in*/ content){
  //   for (std::map<int,std::string>::iterator it=GermanGuidedMissileFrigate.begin(); it!=GermanGuidedMissileFrigate.end(); ++it){
  //       std::cout << it->second << '\n';
  //       if (it->second == content) {
  //         return "ture";
  //       }
  //       else {
  //       if (it==GermanGuidedMissileFrigate.end()) {
  //         return "ende";
  //       }
  //
  //       }
  //   }
  //   return "end";
  // }


} // of namespace Model

/************************************************************
 End of object class body
 ************************************************************/
